#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

indentFunc - re-indent a function proto or prologue, possibly spanning multiple lines

=head1 SYNOPSIS

indentFunc [-help] [-tab N] <stdin>

=head1 DESCRIPTION

Filter script to indent function prototypes and pre-function body text the way I like it.
There's got to be existing scripts for this sort of thing.  The most obvious is gnu-indent, but I'll be
damned if I can get indent to take enough configuration options to do this, so I'm re-inventing the wheel.

Arguments are separated visually into type and name, each arg on a separate line,
each space padded up to the start of the first argument type.

Spaces inserted before and after * and & (pointer or reference modifiers).

Any indenting at the begining of the function declaration is retained.

Run this script as a filter.  For example, within vi, positioned on the first line of the function start, 

   ~
   ~
   ~
   :,$!indentFunc

Assumptions and Restrictions.
   Start of function is the first line.
   Each argument is named.
   No function pointer args (or typedefs used to contain the braces in those arg types).
   No comments on any of the lines before the end of the arguments.
   No default argument assignments.

=cut

=head1 SUPPORTED PLATFORMS

 All (Unix verified)

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR; $| = 1 ;
select STDOUT; $| = 1 ;

#declare lexical variables to be used anywhere in this script (pseudo-global)
my $myName = "" ;
my $tabStop = 3 ;

($myName = $0) =~ s@.*[/\\]@@ ;

GetOptions ( 
   'help'               => sub { pod2usage(-verbose => 2); },
   'tab=i'              => \$tabStop,
) or pod2usage(-verbose => 0) ;

# Validate/handle options

my $buf = '' ;

# slurp up the everything after this point.
while (<>)
{
   $buf .= $_ ;
}

$buf =~ s/^          # start from the current line
         (\s*)       # $1 == capture all spaces
         (.*?)\s*\(  # $2 == name of function and return type (plus inline or static modifiers).
         (.*?)       # $3 == all the arguments.
         \)/foo($1, $2, $3)/smex ;
print $buf ;

exit ;

sub foo
{
   my ($leadingSpaces, $nameOfFunction, $allArgs ) = @_ ;

   # merge all the args into one line:
   $allArgs =~ s/\\n//smg ;

   # require a space before and after all pointer or reference markers:
   $allArgs =~ s/\s*([\*&])\s*/ $1 /g ;

   # now split all the args into separate variables
   my @a = split( /,/, $allArgs ) ;

   # convert multiple spaces to singles
   $nameOfFunction =~ s/\s+/ /g ;

   my $out = "$leadingSpaces$nameOfFunction(" ;

   my $len = length( $out ) + 1 ;
   my $pad = ' 'x$len ;
   my $sep = ' ' ;
   my $alen = 0 ;
   my @b ;

   # pre-process args:
   for ( my $j = 0 ; $j < scalar(@a) ; $j++ )
   {
      # strip off leading and trailing spaces if any
      $a[$j] =~ s/^\s+// ;
      $a[$j] =~ s/\s+$// ;

      my @w = split(/\s+/, $a[$j] ) ;
      my $s2 = '' ;
      my $words = scalar(@w) ;

      $a[$j] = '' ;

      for ( my $i = 0 ; $i < $words - 1 ; $i++ )
      {
         $a[$j] .= "${s2}$w[$i]" ;
         $s2 = ' ' ;
      }

      $b[$j] = $w[$words-1] ;

      my $thisLen = length( $a[$j] ) ;

      $alen = $thisLen if ( $thisLen > $alen ) ;
   }

   # post-process args
   for ( my $j = 0 ; $j < scalar(@a) ; $j++ )
   {
      my $aPadLen = $alen - length($a[$j]) + $tabStop ;
      my $aPad = ' 'x$aPadLen ;

      # first arg preceded by a single space
      $out .= "$sep$a[$j]$aPad$b[$j]" ;

      # any args after this are separated by comma, newline, then $len spaces.
      $sep = ",\n$pad" ;
   }

   $out .= " )" ;

   return $out
}
